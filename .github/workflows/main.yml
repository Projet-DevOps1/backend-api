# ✅ Name of the Workflow
name: Pipeline CI/CD Backend-api

# ✅ Trigger this workflow on push to main branch
on:
  push: 
    branches:
      - main

# ✅ Global Environment Variables
env:
  BUILD_NUMBER: ${{ github.run_number }}  # Unique build number for the pipeline run
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/backend-api:${{ github.run_number }}
  BACKEND_URL: "https://api.30.lebondeveloppeur.net"  # Health check endpoint of the backend API 


  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # ✅ Run Unit Tests
  unit-test-job:
    runs-on: ubuntu-latest
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

    
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run unit tests
        run: npm test

 
 # ✅ Build and Push Docker Image
  build-and-push-job:
    runs-on: ubuntu-latest
    needs: [unit-test-job]  # Wait for unit test job
    steps:
      - name: Clone Source Code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker image 
        run: docker push ${{ env.IMAGE_NAME }}

  # ✅ Deploy to VPS
  deploy-job:
    runs-on: ubuntu-latest
    needs: build-and-push-job  
    steps:
      - name: Connect to the VPS using SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          password: ${{ secrets.VPS_PASSWORD }}
          script: |
            # Create Docker network if it doesn't exist
            sudo docker network inspect backend-api-net || sudo docker network create backend-api-net

            # Backup current image if running
            if sudo docker ps -a --format '{{.Names}}' | grep -q 'backend-api'; then
              current_image=$(sudo docker inspect backend-api --format='{{.Config.Image}}')
              echo "Tagging current image ($current_image) as backup"
              sudo docker tag $current_image backend-api:backup
            fi

            # Pull the latest Docker image
            sudo docker pull ${{ env.IMAGE_NAME }}

            # Remove the old container if it exists
            sudo docker ps -q --filter name=backend-api | grep -q . && sudo docker rm -f backend-api || echo "No existing container to remove"

            # Run the new container with environment variables
            sudo docker run -d \
              --name backend-api \
              --network backend-api-net \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              -e NODE_ENV=production \
              -e MONGO_URI=${{ secrets.MONGO_URI }} \
              --restart=always \
              ${{ env.IMAGE_NAME }}

            # Shows running containers
            sudo docker ps

            # Clean up unused images.
            #sudo docker image prune -f  